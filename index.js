/**
 * espressojs - A framework for building REST APIs
 *
 * Copyright (c) 2015 Daniel Koch
 *
 * https://github.com/dak0rn/espressojs
 */

module.exports = (function() {
    var metacarattere = require('metacarattere');
    var when = require('when');
    var _ = require('lodash');

    // Default function for all not-handled verbs
    var defaultHandler = function(request, response, api, previous) {
        reponse.setStatus('405');
    };

    // HTTP verbs
    var VERBS = [
        'get',
        'post',
        'put',
        'delete',
        'head',
        'options'
    ];

    // Handler identifier for all methods
    var HANDLER_ALL = 'all';

    /**
     * Response
     *
     * Contains information generated by the API
     */
    var Response = function() {

        this.status = '200';    // Default status => Everything's okay
        this.headers = {};      // Response headers
        this.body = undefined;  // Response body
        this.cookies = {};      // Key-value-mapping of cookies

    };

    Response.prototype.setStatus = function(what) {
        if( 'string' !== typeof what && 'number' !== typeof what )
            return;

        this.status = what;
    };

    /**
     * Request
     *
     * Contains information about the client's request
     */
    var Request = function() {

        this.method = undefined;            // Request method
        this.body   = {};                   // Request body, key-value-mappings
        this.hostname = undefined;          // Name of the host
        this.ip       = undefined;          // Client's IP address
        this.path     = undefined;          // The request path
        this.protocol = undefined;          // Request protocol, e.g. 'https'
        this.query    = {};                 // Request's query string, key-value-mappings
        this.cookie   = {};                 // Key-value-mapping of cookie values
        this.header   = {};                 // Key-value-mapping of all header fields

    };


    /**
     * espressojs constructor function
     */
    var Espresso = function() {

        this._resources = [];

    };

    /**
     * Registers a resource
     *
     * @param {string}          pattern     A URL pattern (see metacarattere)
     * @param {object|function} options     An object with HTTP_VERB=>function mappings or a function
     * @param {object}          context     Optional context the given functions will be executed in
     */
    Espresso.prototype.resource = function(pattern, options, context) {

        if( 2 > arguments.length )
            throw new Error('.resource() needs at least two arguments');

        if( 'string' !== typeof pattern )
            throw new Error('.resource() needs a string as a pattern');

        context || (context = {});


    };

    return Espresso;

})();
