/**
 * espressojs - A framework for building REST APIs
 *
 * Copyright (c) 2015 Daniel Koch
 *
 * https://github.com/dak0rn/espressojs
 */

module.exports = (function() {
    var metacarattere = require('metacarattere');
    var when = require('when');
    var _ = require('lodash');

    // Default function for all not-handled verbs
    var defaultHandler = function(request, response, api, previous) {
        reponse.setStatus('405');
    };

    var optionsHandler = function(request, response, api, previous) {

        var callbacks = request.api.handler.callbacks;

        // Create a list of all supported functions
        var toUpperCase = function(s) { return s.toUpperCase(); };
        var methods = _(callbacks).functions().map( toUpperCase ).value().join(',');

        response.headers.Allow = methods;
    };

    // HTTP verbs
    var VERBS = {
        'get': defaultHandler,
        'post': defaultHandler,
        'put': defaultHandler,
        'delete': defaultHandler,
        'head': defaultHandler,
        'options': optionsHandler
    };

    // Handler identifier for all methods
    var HANDLER_ALL = '_all';

    /**
     * Response
     *
     * Contains information generated by the API
     */
    var Response = function() {

        this.status = '200';    // Default status => Everything's okay
        this.headers = {};      // Response headers
        this.body = undefined;  // Response body
        this.cookies = {};      // Key-value-mapping of cookies

    };

    Response.prototype.setStatus = function(what) {
        if( 'string' !== typeof what && 'number' !== typeof what )
            return;

        this.status = what;
    };

    /**
     * Request
     *
     * Contains information about the client's request
     */
    var Request = function() {

        this.method = undefined;            // Request method
        this.body   = {};                   // Request body, key-value-mappings
        this.hostname = undefined;          // Name of the host
        this.ip       = undefined;          // Client's IP address
        this.path     = undefined;          // The request path
        this.protocol = undefined;          // Request protocol, e.g. 'https'
        this.query    = {};                 // Request's query string, key-value-mappings
        this.cookie   = {};                 // Key-value-mapping of cookie values
        this.header   = {};                 // Key-value-mapping of all header fields

        this.api = {
            handler: undefined              // Handler for this request. Set by espressojs
        };

    };

    /**
     * An entry in the API's resource table.
     *
     * Contains information about the pattern, handler and
     * the context the callbacks should be executed in.
     */
    var Handler = function(pattern, callbacks, context) {

        this.callbacks = callbacks || {};        // Verb => function mapping
        this.context   = context || {};          // Invokation context
        this.pattern   = pattern || undefined;   // metacarattere pattern

    };


    /**
     * espressojs constructor function
     */
    var Espresso = function() {

        this._resources = [];

    };

    // Expose parts
    Espresso.Request = Request;
    Espresso.Response = Response;

    /**
     * Registers a resource
     *
     * @param {string}          pattern     A URL pattern (see metacarattere)
     * @param {object|function} options     An object with HTTP_VERB=>function mappings or a function
     * @param {object}          context     Optional context the given functions will be executed in
     */
    Espresso.prototype.resource = function(pattern, options, context) {

        if( 2 > arguments.length )
            throw new Error('.resource() needs at least two arguments');

        if( ! _.isString(pattern) )
            throw new Error('.resource() needs a string as a pattern');

        // Setup context
        context || (context = {});

        // Setup handlers
        var handlers = {};

        // User submitted a function?
        if( _.isFunction(options) )
            handlers[HANDLER_ALL] = options;
        else {
            // If not, we build a assignment of verbs and functions
            _.each( _.keys(VERBS), function(verb) {
                // We use either the given or the default callback
                handlers[verb] = ( _.isFunction(options[verb]) ? options[verb] : VERBS[verb] );
            });
        }

        // Setup the pattern
        pattern = new metacarattere(pattern);

        // Create a new entry in the resources table
        var handler = new Handler(pattern, handlers, context);

        this._resources.push(handler);
    };

    /**
     * Returns a promise
     *
     */
    Espresso.prototype.promise = function() {
        return when.defer();
    };

    return Espresso;

})();
